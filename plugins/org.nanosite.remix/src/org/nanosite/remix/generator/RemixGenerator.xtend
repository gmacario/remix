/*
 * generated by Xtext
 */
package org.nanosite.remix.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import org.nanosite.remix.remix.Model
import org.nanosite.remix.remix.Presentation
import java.io.BufferedReader
import java.io.FileReader
import java.io.FileNotFoundException
import java.io.File
import java.io.IOException
import org.nanosite.remix.remix.Module
import java.util.HashMap
import java.util.Map
import org.nanosite.remix.remix.Collection
import org.nanosite.remix.remix.Part
import org.eclipse.emf.common.CommonPlugin

class RemixGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		println("RemixGenerator running...")
		for(m : resource.allContents.toIterable.filter(typeof(Model))) {
//			var filebase = resource.URI.segments.last
//			var dotfile = filebase.replace('.', '_') + ".txt"
//			if (m.genPath!=null && !m.genPath.empty)
//				dotfile = m.genPath + "/" + dotfile
			for(pres : m.presentations) {
// 				fsa.generateFile(pres.name + ".txt", pres.generate)
				FileHelper::save(pres.targetFolder, "index.html", pres.generate.toString)
 			}
 		}
	}
	
	def private generate (Presentation pres) {
		// prepare some substitutions
		var substitutions = new HashMap<String,String>
		substitutions.put("%%TITLE%%", pres.title)
		substitutions.put("%%DESCRIPTION%%",
			if (pres.description!=null) pres.description else "reveal.js presentation generated by remix"
		)
		substitutions.put("%%THEME%%",
			if (pres.theme!=null) pres.theme.name else "default"
		)
		substitutions.put("%%AUTHOR%%", pres.author)
		
		// generate html
		val out = pres.genAll(substitutions)
		
		// copy resources from used modules
		for(m : pres.parts.map[modules].flatten) {
			val srcdir = m.parentFolder + "/resources"
			val src = new File(srcdir);
			println("copy from " + srcdir + " to " + pres.targetFolder)
			if (src.exists && src.directory) {
				val target = pres.targetFolder + "/resources"
				FileHelper::copyFolder(src, new File(target))
			}
		}
		
		// return generated html
		return out
	}

	def private genAll (Presentation pres, Map<String,String> substitutions) '''
		«FOR p : pres.parts»
		«IF p.title!=null»
			«p.genTitle»
		«ELSE»
			«IF p.overview»
				«pres.genOverview»
			«ENDIF»
		«ENDIF»
		«p.genPartContents(substitutions)»
		«ENDFOR»
	'''

	def private genOverview (Presentation pres) '''
		<!-- Overview generated by remix -->
		<section>
			<h2>Overview</h2>
			<ol>
				«FOR p : pres.parts.filter[title!=null]»
				<li>«p.title»</li>
				«ENDFOR»
			</ol>
		</section>
		
	'''
	
	def private genTitle (Part part) '''
		<section>
			<h2>«part.title»</h2>
			<hr>
			«IF part.image!=null»
			<img width="400" src="resources/«part.image»">
			«ENDIF»
		</section>

	'''	

	def private genPartContents (Part part, Map<String,String> substitutions) '''
		«FOR m : part.modules»
		<!-- «m.name» @ «m.filename» -->
		«m.filename.loadFile.replace(substitutions)»

		«ENDFOR»
	'''
	
	def private String getTargetFolder (Presentation it) {
		target + File::separator + name
	}

	def private getParentFolder (Module it) {
		if (collection.path!=null)
			collection.path
		else {
			val rmxFolder = CommonPlugin::resolve(collection.eResource.URI).path
			val n = rmxFolder.lastIndexOf(File::separator)
			val parent = rmxFolder.substring(0, n+1)
			parent
		}
	}
	def private getCollection (Module it) {
		(eContainer as Collection)
	}

	def private String getFilename (Module it) {
		parentFolder + File::separator + file
	}
	
	def private loadFile (String filename) {
		var file = new File(filename)
 		var content = new StringBuffer
 		var BufferedReader reader = null
 
 		try {
  			reader = new BufferedReader(new FileReader(file))
  			var String s = null
 
			while ((s = reader.readLine()) != null) {
				content.append(s).append(sep)
			}
		} catch (FileNotFoundException e) {
 			throw e
		} catch (IOException e) {
 			throw e
		} finally {
			try {
				if (reader != null) {
					reader.close
				}
			} catch (IOException e) {
			}
		}
		return content.toString
	}
	
	def private replace (String in, Map<String, String> subst) {
		var String out = in
		for(s : subst.keySet) {
			out = out.replaceAll(s, subst.get(s))	
		}
		out
	}
	
	def private getSep() {
		System::getProperty("line.separator")
	}
}

